#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Long;
use Prima::noX11;
use Prima::noARGV;
use Time::HiRes qw(time);
use Prima qw(Image::Animate Image::Loader);

my %opt = (
	help        => 0,
	'help-options' => 0,
	'help-codecs'  => 0,
	output      => undef,
	compression => 'lossless',
	quality     => 75,
	filter      => 0,
	method      => 3,
	recover     => 0,
	policy      => 'keep',
);

sub usage
{
	print <<USAGE;

$0 - convert gif to webp

format: gif2webp [options] file.gif [file.gif]

options:
	--o|-output OUTPUT (default is file.webp)
	--help|-h
	--help-options
	--help-codecs

	-c|--compression lossless|lossy|mixed (default:$opt{compression})
	-q|--quality     0-100                (default:$opt{quality})
	-f|--filter      0-100                (default:$opt{filter})
	-m|--method      0-6                  (default:$opt{method})

	-r|--recover     try to recover a broken file by scanning for individual frames
	-p|--policy      keep|delete|compare  (default:$opt{policy})
	                 keep     - do not delete old gif file
			 delete   - delete old gif file
			 compare  - delete the largest file, either gif or webp

USAGE
	exit 1;
}

GetOptions(\%opt,
	"help|h",
	"help-options",
	"help-codecs",
	"output|o=s",
	"compression|c=s",
	"quality|q=i",
	"filter|f=i",
	"method|m=i",
	"recover|r",
	"policy|p=s",
) or usage;

usage if $opt{help};
return system(perldoc => $0) if $opt{'help-options'};
if ($opt{'help-codecs'}) {
	my (@c, @a, $webp);
	for ( @{ Prima::Image->codecs }) {
		if ( $_->{canLoadMultiple}) {
			push @a, $_->{fileShortType};
		} elsif ( $_->{canLoad}) {
			push @c, $_->{fileShortType};
		}

		$webp = 1 if $_->{canSaveMultiple} && $_->{fileShortType} eq 'WEBP';
	}
	@c = ('none') unless @c;
	@a = ('none') unless @a;
	print "input animation formats supported: @a\n";
	print "input image formats supported: @c\n";
	printf "output WebP animation supported: %s\n", $webp ? 'yes' : 'no';
	exit;
}
usage if $opt{compression} !~ /^(lossless|lossy|mixed)$/;
usage if $opt{quality} < 0 || $opt{quality} > 100;
usage if $opt{filter} < 0 || $opt{filter} > 100;
usage if $opt{method} < 0 || $opt{method} > 6;
usage if $opt{policy} !~ /^(keep|delete|compare)$/;
usage unless @ARGV;

my $codecID;
die "Prima is not compiled with WEBP support\n" unless defined ( $codecID = (( Prima::Image->has_codec('WEBP') // {} )->{codecID}));

@ARGV = <$ARGV[0]> if $^O =~ /win32/i && 1 == @ARGV;
die "-o can be only defined for single input file\n" if 1 < @ARGV && defined $opt{output};

$|++;

my $total_saved = 0;

for my $input (@ARGV) {
	my $output = $opt{output};
	unless ( defined $output ) {
		if ( $input =~ m/^(.*)\.gif/i) {
			$output = "$1.webp";
		} else {
			$output .= ".webp";
		}
	}

	my ($l,$s,$e,$i,$ok);
	($l,$e) = Prima::Image::Animate->load( $input );
	die "Cannot load $input: $e\n" unless $l;
	$l->loader->rescue_mode(1) if $opt{recover};

	($s,$e) = Prima::Image::Saver->new( $output, 
		codecID => $codecID,
		frames  => $l->total,
		(map { ( $_, $opt{$_} ) } qw(compression quality filter method)),
	);

	my $saved = 0;
	eval {
		die "Cannot save $output: $e\n" unless $s;

		my $t = time;
		while ( 1 ) {
			last unless my $info = $l-> next;
			if ( defined (my $warning = $l->warning)) {
				print "\n** Warning: $warning\n";
				print "The output file is invalid and is removed, consider the --scan option\n";
				unlink $output;
				last;
			}
			$i = $l->image;
			$i->{extras}->{delay} = $info->{delay} * 1000 if $info->{delay} > 0;
			($ok,$e) = $s->save($i);
			die "Cannot save $output: $e\n" unless $ok;
			$saved++;
			last if $l->current == $l->total - 1;
			my $t2 = time;
			if ( $t2 - $t > 0 ) {
				print "\r$input: ", ($l->current + 1), "/", $l->total;
				$t = $t2;
			}
		}
		die "no frames saved\n" unless $saved;
	};
	if ($@) {
		unlink $output;
		die $@;
	}
	undef $l;
	undef $s;

	print "\r", $output, ': ', $i->width, 'x', $i->height, ', ', "$saved frames saved";
	if ( $opt{policy} eq 'delete') {
		unlink $input;
		print ", $input deleted";
	} elsif ( $opt{policy} eq 'compare') {
		my $isz = -s $input;
		my $osz = -s $output;
		if ( $isz > 0 && $osz > 0 ) {
			if ( $isz > $osz ) {
				unlink $input;
				printf ", gif deleted, %d bytes saved", $isz - $osz;
				$total_saved += $isz - $osz;
			} else {
				unlink $output;
				print ", webp deleted";
			}
		} else {
			print "\n** Warning: something wrong, input and/or output file size is 0 bytes";
		}
	}
	print "\n";
}

print "Total $total_saved bytes saved\n" if @ARGV > 1 && $total_saved > 0;

=head1 NAME

gif2webp - convert animations to webp

=head1 FILE FORMATS SUPPORTED

Input formats can be GIF, WebP, APNG, and HEIF.
The prerequisite is that the Prima toolkit is compiled with these.

=head1 OPTIONS

=over

=item compression lossless|lossy|mixed

Mixed compression mode: optimize compression of the image
by picking either lossy or lossless compression for each frame heuristically

=item quality INTEGER 0-100

The compression factor for RGB channels between 0 and 100.  In case of lossless
compression, a small factor enables faster compression speed, but produces a
larger file. Maximum compression is achieved by using a value of 100. In case
of lossy compression , a small factor produces a smaller file with lower
quality. Best quality is achieved by using a value of 100.

=item filter INTEGER 0-100

For lossy encoding only.  Specify the strength of the deblocking filter,
between 0 (no filtering) and 100 (maximum filtering).  A value of 0 will turn
off any filtering.  Higher value will increase the strength of the filtering
process applied after decoding the picture.  The higher the value the smoother
the picture will appear.  Typical values are usually in the range of 20 to 50.

=item method 0-6

The compression method to use (0-6). This parameter controls the trade off
between encoding speed and the compressed file size and quality.  When higher
values are used, the encoder will spend more time inspecting additional
encoding possibilities and decide on the quality gain.  Lower value can result
in faster processing time at the expense of larger file size and lower
compression quality.

=back

=cut

